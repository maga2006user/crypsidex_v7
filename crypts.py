# crypsidex_v7.py
# CrypSideX v7 ‚Äî –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç: 2 –∫–Ω–æ–ø–∫–∏ (üìä –ö—É—Ä—Å—ã, üß† –ò–Ω—Å–∞–π–¥—ã)
# - —Å–æ–±–∏—Ä–∞–µ—Ç RSS –Ω–æ–≤–æ—Å—Ç–∏ (–º–∏—Ä–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã, –∫—Ä–∏–ø—Ç–æ, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –ø–æ–ª–∏—Ç–∏–∫–∞)
# - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
# - –¥–µ–ª–∞–µ—Ç —Ç–æ–ø-5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏–Ω—Å–∞–π–¥–æ–≤
# - –ø—Ä–æ—Å—Ç–∞—è "AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞" (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è): —Ç–µ–º—ã, —Ä–∏—Å–∫–∏, –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
#
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
# pip install pyTelegramBotAPI requests
#
# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º: –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN

import telebot
from telebot import types
import requests
import xml.etree.ElementTree as ET
import threading
import time
import random
from datetime import datetime

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
TOKEN = "8237181059:AAFnyfGwdzeQX-ZrQkagn56JIpSb12YgAVI"   # <-- –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω
UPDATE_INTERVAL = 8 * 60    # —Å–µ–∫: –∫–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–µ—à (8 –º–∏–Ω—É—Ç)
CACHE = {
    "usd": None,
    "btc": None,
    "gold": None,
    "news": [],       # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏—Å—Ç–æ—á–Ω–∏–∫, –æ—Ä–∏–≥–∏–Ω–∞–ª, –ø–µ—Ä–µ–≤–æ–¥)
    "updated": None
}
USER_AGENT = "CrypSideXBot/1.0 (+https://t.me/your_channel)"
session = requests.Session()
session.headers.update({"User-Agent": USER_AGENT})
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")

# ----------------- –ò–°–¢–û–ß–ù–ò–ö–ò -----------------
RSS_FEEDS = [
    ("Reuters", "https://www.reuters.com/rssFeed/businessNews"),
    ("Bloomberg", "https://www.bloomberg.com/feed/podcast/etf-report.xml"),  # –º–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å —Ç–µ–≥–∏ <item>
    ("CoinDesk", "https://www.coindesk.com/arc/outboundfeeds/rss/?outputType=xml"),
    ("Cointelegraph", "https://cointelegraph.com/rss"),
    ("FT", "https://www.ft.com/?format=rss"),
    ("Investing", "https://www.investing.com/rss/news.rss"),
]

MARKET_KEYWORDS = [
    "tariff", "trade", "sanction", "inflation", "rate", "fed", "cpi", "gdp",
    "bank", "default", "hack", "regulation", "etf", "ipo", "halving", "merger",
    "acquisition", "crash", "collapse", "tariffs", "tariff", "tariff", "trade war"
]
PERSON_KEYWORDS = ["trump", "musk", "elon", "zuckerberg", "biden", "xi", "putin", "saylor", "cz", "binance"]

# ----------------- –£–¢–ò–õ–ò–¢–´ -----------------
def safe_get(url, timeout=7, params=None):
    try:
        r = session.get(url, timeout=timeout, params=params)
        if r.status_code == 200:
            return r
    except Exception:
        return None
    return None

def translate_to_ru(text):
    # –ü–æ–ø—ã—Ç–∫–∞ LibreTranslate -> MyMemory -> –æ—Ä–∏–≥–∏–Ω–∞–ª
    try:
        r = session.post("https://libretranslate.de/translate",
                         data={"q": text, "source": "en", "target": "ru", "format": "text"},
                         timeout=6)
        if r.ok:
            j = r.json()
            tr = j.get("translatedText")
            if tr:
                return tr
    except Exception:
        pass
    try:
        r = session.get("https://api.mymemory.translated.net/get", params={"q": text, "langpair": "en|ru"}, timeout=6)
        if r and r.status_code == 200:
            j = r.json()
            tr = j.get("responseData", {}).get("translatedText")
            if tr:
                return tr
    except Exception:
        pass
    return text  # fallback

# ----------------- –ü–û–õ–£–ß–ï–ù–ò–ï –ö–£–†–°–û–í -----------------
def fetch_usd_cbr():
    r = safe_get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=6)
    if not r:
        return None
    try:
        return round(r.json()["Valute"]["USD"]["Value"], 2)
    except Exception:
        return None

def fetch_btc_binance():
    r = safe_get("https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT", timeout=6)
    if not r:
        return None
    try:
        return round(float(r.json().get("price", 0)), 2)
    except Exception:
        return None

def fetch_gold():
    # –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ–ª–ª–±–µ–∫–æ–≤
    try:
        r = safe_get("https://data-asg.goldprice.org/dbXRates/USD", timeout=6)
        if r:
            j = r.json()
            items = j.get("items")
            if items and isinstance(items, list):
                p = items[0].get("xauPrice")
                if p:
                    return round(float(p), 2)
    except Exception:
        pass
    try:
        r = safe_get("https://query1.finance.yahoo.com/v7/finance/quote?symbols=GC=F", timeout=6)
        if r:
            res = r.json().get("quoteResponse", {}).get("result", [])
            if res:
                p = res[0].get("regularMarketPrice")
                if p:
                    return round(float(p), 2)
    except Exception:
        pass
    return None

# ----------------- –ù–û–í–û–°–¢–ò: —Å–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ -----------------
def fetch_rss_headlines(limit_per_feed=6):
    headlines = []
    for name, url in RSS_FEEDS:
        r = safe_get(url, timeout=8)
        if not r:
            continue
        try:
            root = ET.fromstring(r.content)
            items = root.findall(".//item")
            count = 0
            for it in items:
                if count >= limit_per_feed:
                    break
                t = it.find("title")
                if t is not None and t.text:
                    headlines.append((name, t.text.strip()))
                    count += 1
        except Exception:
            # –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ —É–ø–∞–ª ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
    return headlines

def build_news_cache():
    raw = fetch_rss_headlines(limit_per_feed=5)
    dedup = []
    seen = set()
    for src, title in raw:
        key = title.lower()
        if key in seen:
            continue
        seen.add(key)
        tr = translate_to_ru(title)
        dedup.append((src, title, tr))
        if len(dedup) >= 25:
            break
    return dedup

# ----------------- "AI" –≠–í–†–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó -----------------
def analyze_headlines(headlines, top_n=5):
    """
    headlines: list of (src, orig, ru)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - top_insights: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (—Ç–æ–ø N –∏–Ω—Å–∞–π–¥–æ–≤ –≤ –≤–∏–¥–µ "[Source] –ü–µ—Ä–µ–≤–æ–¥")
      - analysis_text: —Å—Ç—Ä–æ–∫–∞ —Å –∫—Ä–∞—Ç–∫–∏–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    """
    # —Ä–∞–Ω–∂–∏—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    scored = []
    for src, orig, ru in headlines:
        score = 0
        lower = (orig + " " + ru).lower()
        for kw in MARKET_KEYWORDS:
            if kw in lower:
                score += 2
        for p in PERSON_KEYWORDS:
            if p in lower:
                score += 3
        # –Ω–µ–±–æ–ª—å—à–∞—è –±–æ–Ω—Éc –∑–∞ —Å–ª–æ–≤–∞ "war", "conflict", "attack"
        for w in ("war","conflict","attack","invasion","sanction","tariff","hack"):
            if w in lower:
                score += 2
        scored.append((score, src, orig, ru))
    scored.sort(key=lambda x: -x[0])

    top = scored[:top_n]
    top_insights = [f"[{src}] {ru}" for score, src, orig, ru in top]

    # —Å–æ–±—Ä–∞—Ç—å –æ–±—â–∏–µ —Ç–µ–º—ã
    theme_counts = {}
    person_counts = {}
    risk_flags = set()
    for score, src, orig, ru in scored:
        text = (orig + " " + ru).lower()
        for kw in MARKET_KEYWORDS:
            if kw in text:
                theme_counts[kw] = theme_counts.get(kw, 0) + 1
        for p in PERSON_KEYWORDS:
            if p in text:
                person_counts[p] = person_counts.get(p, 0) + 1
        for w in ("war","invasion","conflict","attack"):
            if w in text:
                risk_flags.add("geo")
        for w in ("hack","breach","leak"):
            if w in text:
                risk_flags.add("security")

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
    themes_sorted = sorted(theme_counts.items(), key=lambda x: -x[1])
    people_sorted = sorted(person_counts.items(), key=lambda x: -x[1])

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    analysis_lines = []
    ts = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    analysis_lines.append(f"‚è± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {ts}")
    if themes_sorted:
        top_theme = themes_sorted[0][0]
        analysis_lines.append(f"üîé –¢–æ–ø —Ç–µ–º–∞ –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö: ¬´{top_theme}¬ª (—á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è)")
    else:
        analysis_lines.append("üîé –¢–æ–ø —Ç–µ–º–∞: –Ω–µ—è–≤–Ω–∞—è ‚Äî —Å–º–µ—à–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")

    if people_sorted:
        p_list = ", ".join([p.upper() for p, c in people_sorted[:3]])
        analysis_lines.append(f"üë• –ü–µ—Ä—Å–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã—Ö —É–ø–æ–º–∏–Ω–∞—é—Ç —á–∞—â–µ: {p_list}")

    # —Ä–∏—Å–∫–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    if "geo" in risk_flags:
        analysis_lines.append("‚ö†Ô∏è –†–∏—Å–∫ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏ ‚Äî –º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Å—ã—Ä—å–µ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö –∏ –≤–∞–ª—é—Ç–µ.")
    if "security" in risk_flags:
        analysis_lines.append("üîê –†–∏—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–≤–∑–ª–æ–º—ã/—É—Ç–µ—á–∫–∏) ‚Äî –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–¥–∞—Ä –ø–æ –±–∏—Ä–∂–∞–º/–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.")

    # –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—á–µ—Ç–∞–Ω–∏—é —Ç–µ–º)
    rec = []
    # –µ—Å–ª–∏ –º–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ tariffs/sanction -> –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–π–Ω—ã
    if any(k in dict(themes_sorted) for k in ("tariff","sanction","trade")):
        rec.append("–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é –Ω–∞ –∏–º–ø–æ—Ä—Ç–æ–∑–∞–≤–∏—Å–∏–º—ã–µ –∞–∫—Ç–∏–≤—ã; –ø–æ–¥—É–º–∞—Ç—å –æ —Ö–µ–¥–∂–∞—Ö –ø—Ä–æ—Ç–∏–≤ –ø–æ—à–ª–∏–Ω.")
    # –µ—Å–ª–∏ –º–Ω–æ–≥–æ –ø—Ä–æ rate/fed/inflation
    if any(k in dict(themes_sorted) for k in ("rate","fed","inflation","cpi")):
        rec.append("–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫ —Å—Ç–∞–≤–∫–∞–º –∞–∫—Ç–∏–≤—ã ‚Äî –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π; —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É –ø–æ—Ä—Ç—Ñ–µ–ª—è.")
    # –µ—Å–ª–∏ –ø—Ä–æ hack/security
    if "security" in risk_flags:
        rec.append("–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∏—Ä–∂–∞—Ö; –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–æ–ª–æ–¥–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏/–º—É–ª—å—Ç–∏-sig.")
    # –µ—Å–ª–∏ –ø—Ä–æ war/geo
    if "geo" in risk_flags:
        rec.append("–î–µ—Ä–∂–∞—Ç—å —á–∞—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö (–∑–æ–ª–æ—Ç–æ, —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã).")

    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏–ª–æ—Å—å ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if not rec:
        rec.append("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é. –ù–µ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å ‚Äî –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É.")

    # –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    forecast = "üìà –ö—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑: "
    # –µ—Å–ª–∏ BTC/Gold —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è ‚Äî –ø–æ–∑–∏—Ç–∏–≤ –¥–ª—è –∑–∞—â–∏—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
    combined_text = " ".join([orig + " " + ru for score, src, orig, ru in scored[:12]]).lower()
    if "bitcoin" in combined_text or "btc" in combined_text:
        forecast += "–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –∫—Ä–∏–ø—Ç–æ; –≤–æ–∑–º–æ–∂–Ω—ã –±—ã—Å—Ç—Ä—ã–µ –æ—Ç—Å–∫–æ–∫–∏."
    elif "gold" in combined_text or "–∑–æ–ª–æ—Ç–æ" in combined_text:
        forecast += "–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å –Ω–∞ –∑–æ–ª–æ—Ç–æ –∫–∞–∫ –∑–∞—â–∏—Ç–Ω—ã–π –∞–∫—Ç–∏–≤."
    else:
        forecast += "—Ä—ã–Ω–æ–∫ –º–æ–∂–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–æ–ø-3 —Å–æ–±—ã—Ç–∏—è–º–∏."

    analysis_lines.append(forecast)
    analysis_lines.append("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + "\n".join(f"- {r}" for r in rec))

    analysis_text = "\n".join(analysis_lines)
    return top_insights, analysis_text

# ----------------- –û–ë–ù–û–í–õ–ï–ù–ò–ï CACHE –≤ —Ñ–æ–Ω–µ -----------------
def update_loop():
    while True:
        try:
            CACHE["usd"] = fetch_usd_cbr()
            CACHE["btc"] = fetch_btc_binance()
            CACHE["gold"] = fetch_gold()
            CACHE["news"] = build_news_cache()
            CACHE["updated"] = datetime.utcnow().isoformat()
        except Exception:
            pass
        time.sleep(UPDATE_INTERVAL)

threading.Thread(target=update_loop, daemon=True).start()

# ----------------- TELEGRAM: –º–µ–Ω—é –∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã -----------------
def build_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(types.KeyboardButton("üìä –ö—É—Ä—Å—ã"), types.KeyboardButton("üß† –ò–Ω—Å–∞–π–¥—ã"))
    return kb

@bot.message_handler(commands=['start', 'help'])
def cmd_start(m):
    bot.send_message(m.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç üëã\n–Ø CrypSideX ‚Äî –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –∫—É—Ä—Å–æ–≤ –∏ –∏–Ω—Å–∞–π–¥–æ–≤.\n"
                     "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=build_keyboard())

@bot.message_handler(func=lambda m: m.text == "üìä –ö—É—Ä—Å—ã")
def cmd_rates(m):
    usd = CACHE.get("usd") or "‚Äî"
    btc = CACHE.get("btc") or "‚Äî"
    gold = CACHE.get("gold") or "‚Äî"
    ts = CACHE.get("updated") or "‚Äî"
    text = (f"üìä <b>–ö—É—Ä—Å—ã (–±—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞)</b>\n\n"
            f"üíµ USD (–¶–ë) = <b>{usd}</b> ‚ÇΩ\n"
            f"‚Çø BTC = <b>{btc}</b> $\n"
            f"ü•á Gold (1 oz) = <b>{gold}</b> $\n\n"
            f"üïò –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {ts}")
    bot.send_message(m.chat.id, text)

@bot.message_handler(func=lambda m: m.text == "üß† –ò–Ω—Å–∞–π–¥—ã")
def cmd_insights(m):
    bot.send_chat_action(m.chat.id, "typing")
    news = CACHE.get("news", [])
    if not news:
        bot.send_message(m.chat.id, "–ù–æ–≤–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    # –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    top_insights, analysis = analyze_headlines(news, top_n=5)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–æ–ø –∏–Ω—Å–∞–π–¥–æ–≤ + –∞–Ω–∞–ª–∏–∑
    msg = "<b>üß† –¢–æ–ø –∏–Ω—Å–∞–π–¥–æ–≤ (—Å–æ–±—Ä–∞–Ω—ã –∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã):</b>\n\n"
    for i, t in enumerate(top_insights, 1):
        msg += f"{i}. {t}\n"
    msg += "\n" + "<b>ü§ñ –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:</b>\n" + analysis
    bot.send_message(m.chat.id, msg)

@bot.message_handler(func=lambda m: True)
def fallback(m):
    bot.send_message(m.chat.id, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é üëá", reply_markup=build_keyboard())

# ----------------- –°–¢–ê–†–¢ -----------------
if __name__ == "__main__":
    print("CrypSideX v7 –∑–∞–ø—É—â–µ–Ω. –ñ–º–∏ /start –≤ Telegram")
    # –¥–µ–ª–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –±—ã–ª–∏ –¥–∞–Ω–Ω—ã–µ
    try:
        CACHE["usd"] = fetch_usd_cbr()
        CACHE["btc"] = fetch_btc_binance()
        CACHE["gold"] = fetch_gold()
        CACHE["news"] = build_news_cache()
        CACHE["updated"] = datetime.utcnow().isoformat()
    except Exception:
        pass
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
0
